
Toilet door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000894  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000343  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020d  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  88:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <stateMachine_change>:
		State = state_change(Event, State);	//Set the State to the current state of the door.
    }
}

uint8_t stateMachine_change(unsigned int Event, unsigned int State)
{
  90:	9c 01       	movw	r18, r24
	uint8_t sendData = doorStatus;
  92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	switch(State)
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	71 05       	cpc	r23, r1
  9a:	51 f0       	breq	.+20     	; 0xb0 <stateMachine_change+0x20>
  9c:	20 f0       	brcs	.+8      	; 0xa6 <stateMachine_change+0x16>
  9e:	62 30       	cpi	r22, 0x02	; 2
  a0:	71 05       	cpc	r23, r1
  a2:	99 f0       	breq	.+38     	; 0xca <stateMachine_change+0x3a>
  a4:	08 95       	ret
	{
		case S_OPEN:
		{
			switch(Event)
  a6:	21 30       	cpi	r18, 0x01	; 1
  a8:	31 05       	cpc	r19, r1
  aa:	11 f4       	brne	.+4      	; 0xb0 <stateMachine_change+0x20>
			{	
				case E_CLOSED:
				{
					//Door was open and somebody closed it
					PORTD |= (1<<PIND5); //Turn on the closed-door LED
  ac:	5d 9a       	sbi	0x0b, 5	; 11
  ae:	10 c0       	rjmp	.+32     	; 0xd0 <stateMachine_change+0x40>
				}
			}
		}
		case S_CLOSED:
		{
			switch(Event)
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	21 f0       	breq	.+8      	; 0xbe <stateMachine_change+0x2e>
  b6:	23 30       	cpi	r18, 0x03	; 3
  b8:	31 05       	cpc	r19, r1
  ba:	21 f0       	breq	.+8      	; 0xc4 <stateMachine_change+0x34>
  bc:	06 c0       	rjmp	.+12     	; 0xca <stateMachine_change+0x3a>
			{
				case E_OPEN:
				{
					//Doors were closed and somebody opened it
					PORTD &= ~(1<<PIND5); //Turn the closed-door LED off
  be:	5d 98       	cbi	0x0b, 5	; 11
					sendData = DOOR_OPEN;
  c0:	80 e0       	ldi	r24, 0x00	; 0
					break;
  c2:	08 95       	ret
					break;
				}
				case E_LOCK:
				{
					//Doors were closed and locked
					PORTD |= (1<<PIND4); // Turn on the lock-door LED
  c4:	5c 9a       	sbi	0x0b, 4	; 11
					sendData = DOOR_LOCKED;
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	08 95       	ret
				}
			}
		}
		case (S_LOCKED):
		{
			switch (Event)
  ca:	21 30       	cpi	r18, 0x01	; 1
  cc:	31 05       	cpc	r19, r1
  ce:	11 f4       	brne	.+4      	; 0xd4 <stateMachine_change+0x44>
					break;
				}
				case E_CLOSED:
				{
					//Doors were unlocked => go back to closed
					PORTD &= ~(1<<PIND4); //Turn off the door-locked LED
  d0:	5c 98       	cbi	0x0b, 4	; 11
					sendData = DOOR_CLOSED;
  d2:	81 e0       	ldi	r24, 0x01	; 1
		}
		
	}
	//return the data that will be sent to RPi over the SPI
	return sendData;
}
  d4:	08 95       	ret

000000d6 <state_change>:

unsigned int state_change(unsigned int Event, unsigned int State)
{
	unsigned int newState = State;
	switch(State)
  d6:	61 30       	cpi	r22, 0x01	; 1
  d8:	71 05       	cpc	r23, r1
  da:	41 f0       	breq	.+16     	; 0xec <state_change+0x16>
  dc:	20 f0       	brcs	.+8      	; 0xe6 <state_change+0x10>
  de:	62 30       	cpi	r22, 0x02	; 2
  e0:	71 05       	cpc	r23, r1
  e2:	79 f0       	breq	.+30     	; 0x102 <state_change+0x2c>
  e4:	15 c0       	rjmp	.+42     	; 0x110 <state_change+0x3a>
	{
		case S_OPEN:
		{
			switch(Event)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	49 f0       	breq	.+18     	; 0xfe <state_change+0x28>
			}
			
		}
		case S_CLOSED:
		{
			switch(Event)
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	91 05       	cpc	r25, r1
  f0:	69 f0       	breq	.+26     	; 0x10c <state_change+0x36>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	91 05       	cpc	r25, r1
  f6:	29 f4       	brne	.+10     	; 0x102 <state_change+0x2c>
					break;	
				}
				case (E_LOCK):
				{
					//The doors were closed and are now locked
					newState = S_LOCKED;
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	09 c0       	rjmp	.+18     	; 0x110 <state_change+0x3a>
			switch(Event)
			{
				case(E_CLOSED):
				{
					//The doors were open and their state was changed to closed
					newState = S_CLOSED;
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	70 e0       	ldi	r23, 0x00	; 0
				}
			}
		}
		case (S_LOCKED):
			{
				switch (Event)
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	29 f4       	brne	.+10     	; 0x110 <state_change+0x3a>
						break;
					}
					case E_CLOSED:
					{
						//doors were unlocked => go back to closed
						newState = S_CLOSED;
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <state_change+0x3a>
			switch(Event)
			{
				case(E_OPEN):
				{
					//The doors were closed and their state changed to opened
					newState = S_OPEN;
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
			break;
		}
	}
	return newState;
	
}
 110:	cb 01       	movw	r24, r22
 112:	08 95       	ret

00000114 <event_change>:
int event_change()
{
	int Event = E_NOTHING;
	while (Event == E_NOTHING)
	{
		if (PIND & (1<<PIND7)) //If the doors close
 114:	4f 9b       	sbis	0x09, 7	; 9
 116:	05 c0       	rjmp	.+10     	; 0x122 <event_change+0xe>
		{
			Event = E_CLOSED;
			if (PIND & (1<<PIND6)){ //if the doors are locked
 118:	4e 9b       	sbis	0x09, 6	; 9
 11a:	06 c0       	rjmp	.+12     	; 0x128 <event_change+0x14>
				Event = E_LOCK;
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
			//when unlocked
			else Event = E_CLOSED;
		}
		else//If the doors open
		{
			Event = E_OPEN;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return Event;
}
 12c:	08 95       	ret

0000012e <spiSlave_init>:

void spiSlave_init (){
	//Allow interrupt and SPI
	SPCR |= (1<<SPIE) | (1<<SPE);
 12e:	8c b5       	in	r24, 0x2c	; 44
 130:	80 6c       	ori	r24, 0xC0	; 192
 132:	8c bd       	out	0x2c, r24	; 44
	//Set MISO as output
	DDRB |= (1<<PINB4);
 134:	24 9a       	sbi	0x04, 4	; 4
 136:	08 95       	ret

00000138 <pin_setup>:
}

void pin_setup(){
	// set digital pin 5 and 4 as output and set it to low
	DDRD |= (1<<PIND5) | (1<<PIND4);
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	80 63       	ori	r24, 0x30	; 48
 13c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PIND5) | (1<<PIND4);
 13e:	5d 98       	cbi	0x0b, 5	; 11
	// set digital pin 7 and 6 as input, external pull-down resistor necessary
	DDRD &= ~(1<<PIND7) | (1<<PIND6);
 140:	57 98       	cbi	0x0a, 7	; 10
 142:	08 95       	ret

00000144 <main>:
int main(void)
{
	unsigned int Event;
	unsigned int State;
	//Initializes the pins
	pin_setup();
 144:	0e 94 9c 00 	call	0x138	; 0x138 <pin_setup>
	//Initialize AVR as SPI slave
	spiSlave_init ();
 148:	0e 94 97 00 	call	0x12e	; 0x12e <spiSlave_init>
	//Set the initial state as open
	State = S_OPEN;
	//Allow global interrupts. The AVR will be waiting for a request from RPi. 
	sei();
 14c:	78 94       	sei
	//Initializes the pins
	pin_setup();
	//Initialize AVR as SPI slave
	spiSlave_init ();
	//Set the initial state as open
	State = S_OPEN;
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
	//Allow global interrupts. The AVR will be waiting for a request from RPi. 
	sei();
		
    while (1) 
    {
		Event = event_change(); //What event has occurred?
 152:	0e 94 8a 00 	call	0x114	; 0x114 <event_change>
 156:	8c 01       	movw	r16, r24
		doorStatus = stateMachine_change(Event, State); //Set the doorStaus with the current status of the door. 
 158:	be 01       	movw	r22, r28
 15a:	0e 94 48 00 	call	0x90	; 0x90 <stateMachine_change>
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		State = state_change(Event, State);	//Set the State to the current state of the door.
 162:	be 01       	movw	r22, r28
 164:	c8 01       	movw	r24, r16
 166:	0e 94 6b 00 	call	0xd6	; 0xd6 <state_change>
 16a:	ec 01       	movw	r28, r24
 16c:	f2 cf       	rjmp	.-28     	; 0x152 <main+0xe>

0000016e <__vector_17>:
	PORTD &= ~(1<<PIND5) | (1<<PIND4);
	// set digital pin 7 and 6 as input, external pull-down resistor necessary
	DDRD &= ~(1<<PIND7) | (1<<PIND6);
}

ISR (SPI_STC_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
	//ISR that sends the status of the door over the SPI
	SPDR = doorStatus;
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	8e bd       	out	0x2e, r24	; 46
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
